// routine to parse the rules passed from an application.
//
// with an input string AES,ABCD,A2345678,,55  it returns
// AES     ABCD    A234567855      .  missing out the ,,
// and elements padded to 8 chars
/**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
int parseRules(char * pIn, char * pOut,int lOut)
{

   int rc;
   char * pIn2 = strdup(pIn); // because strtok changes the string
   char * pNext  = pOut;
   char * pEnd  = pOut + lOut;
   char * token = pIn2;
   token = strtok(pIn2, ",");
   do
   {
     if (debug > 0 )
        printf("token: \"%s\"\n", token);
     if (token == NULL)
        return 0;
     if (strlen(token) == 0 )
     {
        printf("Invalid string, missing valu%s\n",pIn);
        return 8;
     }
     if (strlen(token) > 8)
     {
           printf("Invalid item, too long %s\n",token);
           return 8;
     }
     if (pNext + 9 > pEnd)
     {
       printf("Too many parameters in options %s\n",pIn);
       return 8;
     }
     memset(pNext,' ',8); // preset it to blanks
     memcpy(pNext,token,strlen(token)); // copy but not the terminating null
     pNext += 8; // move to the next space
     * pNext  = 0x00;//  set a null terminator
   }
   while (token = strtok(NULL, ", ;"));
   return 0;
}
