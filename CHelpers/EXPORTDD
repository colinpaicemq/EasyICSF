#ifndef exportdd_INCLUDE
#define exportdd_INCLUDE
  /*Include standard libraries */
#define _OPEN_SYS
#include <base64en>  // colin special
// export in Base 64 format to //DD ...
int exportDD(char * dd, char * pData, int lData)
{
   int ldd = strlen(dd);
   char mydd[ldd+3 +1]; //dd:+value  +1 for null
   memcpy(&mydd[0],"dd:",3);
   strcpy(&mydd[3],dd);
   FILE * fCert = fopen(mydd,"wb,type=record");
   if (fCert == NULL)
   {
     perror("error opening file");
     printf("Error opening %s\n",mydd);
     return 8;
   }
   unsigned int lEncoding;
   char * pEncoding =
         base64_encode(pData,
                       lData,
                       &lEncoding);
   printf("B64 encoding in length %i out %i",lData,lEncoding);

  int zz;
  memcpy(&zz,pEncoding,4);
  printf(" based 64encoding %8.8x\n",zz);
  long i;
  char * pB        = pEncoding;
  int remainder;
  remainder = lEncoding;
  // do it in blocks of 64 except last
  for (i = 0;; i++ )
  {
    if(remainder < 64) break;
    fwrite(pB,1,64,fCert);
    remainder -= 64;
    pB += 64;
  }
  if ( remainder > 0)
     fwrite(pB,1,remainder,fCert);
  fclose(fCert);
  return 0;
}
#endif
