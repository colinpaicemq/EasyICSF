// parse the arguments
#ifndef ARGS2_INCLUDE
#define ARGS2_INCLUDE
/**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
// some fields have to be padded eg to length 64.
// We do it her, and the storage is ever free.
int  readArgs(int argc, char *argv??(??),char * name,int len   ,
char ** addr,char * flags)
{
  int i;
  for ( i = 1;i <=argc;i ++)  // ignore program name
  {
     if(strcmp(name,argv[i]) ==0)  // match
     {
       if (flags[0] == 'v')//  needs a value
       {
         if (i+1 >= argc ) // past last option
         {
           printf("Argument %s is missing a value\n",name);
           return 7;
         }
         if ( len == 0) // we do not care about the length
         {
            * addr = argv[i+1];
         }
         else // we need to return a string of the right length
         {
           if (strlen(argv[i+1]) > len)
           {
              printf("Argment for %s is too long.  Length <= %i\n",
                      name,len);
              return 8;
           }
           char * pValue;
           pValue = malloc(len+1);
           memset(pValue,' ',len);
           pValue[len] = 0; // null terminaltor
           memcpy(pValue,argv[i+1] ,strlen(argv[i+1]) );
          * addr = pValue;
         }
        return 0;
       }
       else
       {
          * addr = argv[i];     // point to it the name
          return 0;
       }
     }
  }
//printf("Parameter not found %s\n",name);
  *addr = "";
  return 0;
}
#endif
