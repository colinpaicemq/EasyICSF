int skelDH(char ** pData,int * lData)
{
/*********************************************************************/
/* Create a skeleton token for the derived key                       */
/*********************************************************************/
  int rc;
  int rs;
  int zero = 0;
  int rule_count                 =  2;
  // key type AES and used for OP (on this system
  char8 rule[3]  = {"AES     ",
                    "INTERNAL",
                    "KEYLN32 "};
  char * pRule = & rule[0][0];
  char * pType = "CIPHER  ";
  int lToken = 64;
  char * pToken = (char *) malloc(lToken);
  char keyValue[32];
  char tokenData1[8];
  memset(&tokenData1[0],0,sizeof(tokenData1));
// ktb_key_value          = '';
// ktb_key_token          = copies('00'x,64)
// KTB Is for fixed format
 CSNBKTB (
         &rc  ,                   /* return code         */
         &rs  ,                   /* reason code         */
         &zero,                   /* exit data length   0*/
         0,                       /* exit data[]        0*/

         pToken,
         pType,

         &rule_count,             /* rule array count    ! */
         pRule,                   /* rule array[]        ! */

         0,                       // key value
         &zero,                   // master key version
         &zero,                   // key register ignored
(char *) &tokenData1,
         0,                       // control vector ignored AES
         0,                       //  init vector ignored
         &zero,                   // pad    ignored
         0,                       // crypto period start - ignore
         0                        // master verification pattern
         );
    printf("CSNBKTB rc %i rs %i %s\n",rc,rs,csfgetrc(rs));
  if ( rc > 0)
  {
    return rc;
  }
  * pData = pToken;
  * lData = lToken;
  return rc;
}
int GENDH(
char * pPrivate,
char * pPublic,
char **  pData,
int  * lData)
{
  int rc;
  int rs;
  int zero = 0;
  int rule_count                 =  2;
  // key type AES and used for OP (on this system
  char8 rule[2]  = {"DERIV01 "
                   ,"KEY-AES "};
  char * pRule = & rule[0][0];
  int keyLength = 256 ;//  AES 256  - why use any other?

  char *pkeyType1 = "TOKEN   ";
  char *pkeyType2 = "        ";

  int i64 = 64;
  int l725 = 725;
  int lParty = 14;
  int l = * lData;
  char * pParty = "zzzzsaction-id";
  CSNDEDH(
          &rc  ,                   /* return code         */
          &rs  ,                   /* reason code         */
          &zero,                   /* exit data length   0*/
          0,                       /* exit data[]        0*/

          &rule_count,             /* rule array count    ! */
          pRule,                   /* rule array[]        ! */

          &i64,                    /* Len private           */
          pPrivate,                /* private             ! */
          &zero, // l Kek
          0,                       // p KEK
          &i64,                    /* Len public            */
          pPublic     ,            /* public              ! */
          &zero,                    /* chaining             0*/
          0,                        /* chaining ignored     0*/
         &lParty,               /* output key id2[]      !  */
          pParty,                // transaction-id
          &keyLength,
          &zero,                    /* reserved1             */
          0,                        /*                       */
          &zero,                    /* reserved2             */
          0,                        /*                       */
          &zero,                    /* reserved3             */
          0,                        /*                       */
          &zero,                    /* reserved4             */
          0,                        /*                       */
          &zero,                    /* reserved5             */
          0,                        /*                       */
          &zero,                    /* L' output kek         */
          0,                        /*    output kek         */
          &l,
         *pData
  );           /* output key id2[]      !  */
  if ( rc > 0)
  {
    printf("CSNDEDH  rc %i rs %i %s\n",rc,rs,csfgetrc(rs));
    return rc;
  }
  *lData = l   ;
//* pData
  return rc;
}
