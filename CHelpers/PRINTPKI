#ifndef PRINTPKI_INCLUDE
#define PRINTPKI_INCLUDE
// apg pages 1376 table 588  etc
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string.h>
char * lookupPKISection(char    t)
{
  typedef struct list
   {
     char c;
     char * reason;
   } list;
   list  pList[] =
   { {0x02,"RSA private key, modulus-exponent format (RSA-PRIV"},
     {0x04,"RSA public key"},
     {0x08,"RSA private key, Chinese Remainder T format (RSA-CRT)"},
     {0x10,"RSA private key name"},
     {0x20,"ECC private key"},
     {0x21,"ECC public key"},
     {0x23,"ECC Key-derivation information"},
     {0x30,"RSA private key, ME format with AES encrypted OPK"},
     {0x31,"RSA private key, CRT format with AES encrypted OPK"}
   };
   int i;
   int size = sizeof(pList)/sizeof(pList[1]);
   for (i = 0;i < size;i++)
   {
     if(pList[i].c ==t) return pList[i].reason ;
   }
   return "Unknown" ;
}
int printPKI( char * p,int lIn,FILE * f)
{
  char * q;
  char * qend;
  short * hL;
  q = p;
  hL  =  (short *)&q[2];
  int iL  = * hL;
  qend = q+lIn;
  int z;
  switch (q[0])
  {
    case  0x00:
      fprintf(f ,"Null token\n");
      break;
    case  0x1E:
      fprintf(f ,"External token\n");
      break;
    case  0x1F:
      fprintf(f ,"Internal token\n");
      break;
    default:
      z = q[0];  // print out the value
      fprintf(f ,"Unrecognised token %x\n",z);
  }
//fprintf(f,"Header\n");
//printHex(f     ,q,8);
  q+= 8; // past the header
  int i;
  short * sh;
  for (i=0;;i++)
  {
    if ( q >=qend) return 0;
    hL  =  (short *)&q[2];
    iL  = * hL;
    fprintf(f,"PKI block %s\n",lookupPKISection(*q));
    if ( *q ==0x20)  // private
    {
      fprintf(f ,"ECC Private key\n");
           if ( *(q+4)  ==0x00) fprintf(f,"  Section is unencrypted\n");
      else if ( *(q+4)  ==0x01) fprintf(f,"  CBC Wrap- other\n");

           if ( *(q+5) ==0x01)  fprintf(f,"  SHA224\n");
      else if ( *(q+5)  ==0x02) fprintf(f,"  SHA256\n");

           if ( *(q+9)  ==0x00) fprintf(f,"  Prime Curve\n");
      else if ( *(q+9)  ==0x01) fprintf(f,"  Brainpool curve\n");
      else if ( *(q+9)  ==0x02) fprintf(f,"  Edwardsl curve\n");
      else if ( *(q+9)  ==0x03) fprintf(f,"  Koblitz curve\n");
      sh = (short *) (q+12);
           if (*sh       ==0x00c0) fprintf(f,"  192\n");
      else if (*sh       ==0x00e0) fprintf(f,"  224\n");
      else if (*sh    ==0x00ff) fprintf(f,"  25519\n");
      else if (*sh    ==0x0100) fprintf(f,"  256\n");
      else if (*sh    ==0x0140) fprintf(f,"  320\n");
      else if (*sh    ==0x0180) fprintf(f,"  384\n");
      else if (*sh    ==0x01c0) fprintf(f,"  444\n");
    }
    if ( *q ==0x21) // public
    {
      fprintf(f ,"ECC Public key\n");
           if ( *(q+8)  ==0x00) fprintf(f,"  Prime Curve\n");
      else if ( *(q+8)  ==0x01) fprintf(f,"  Brainpool curve\n");
      else if ( *(q+8)  ==0x02) fprintf(f,"  Edwardsl curve\n");
      else if ( *(q+8)  ==0x03) fprintf(f,"  Koblitz curve\n");
      sh = (short *) (q+10); // for public
           if (*sh      ==0x00c0) fprintf(f,"  192\n");
      else if (*sh      ==0x00e0) fprintf(f,"  224\n");
      else if (*sh      ==0x00ff) fprintf(f,"  25519\n");
      else if (*sh      ==0x0100) fprintf(f,"  256\n");
      else if (*sh      ==0x0140) fprintf(f,"  320\n");
      else if (*sh      ==0x0180) fprintf(f,"  384\n");
      else if (*sh      ==0x01c0) fprintf(f,"  444\n");
      sh = (short *) (q+12);
      int ish = * sh;
      fprintf(f,"Length of public key %i\n",ish );
    }
    if ( *q ==0x31)
    {
      fprintf(f ,"RSA private 4096 ChiRremTh  AES-Enc OPK\n");
           if ( *(q+14)  ==0x00) fprintf(f,"  Clear key\n");
      else if ( *(q+14)  ==0x02) fprintf(f,"  SHA -256\n");
      else if ( *(q+14)  ==0x01) fprintf(f,"  CBC Wrap- other\n");

           if ( *(q+51)  ==0x00) fprintf(f,"  No format restriction\n");
      else if ( *(q+51)  ==0x01) fprintf(f,"  ISO-9796\n");
      else if ( *(q+51)  ==0x02) fprintf(f,"  PKCS-1.0\n");
      else if ( *(q+51)  ==0x03) fprintf(f,"  PKCS-1.1\n");
      else if ( *(q+51)  ==0x04) fprintf(f,"  PKCS-PSS\n");
      else if ( *(q+51)  ==0x05) fprintf(f,"  X9.31\n");
      else if ( *(q+51)  ==0x06) fprintf(f,"  Zero Pad\n");

    }
    // print out the key in hex
//  printHex(f,q,iL);
    q += iL; // past the block
  }
}
#endif
