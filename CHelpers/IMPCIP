#ifndef DOIMPCIP_INCLUDE
#define DOIMPCIP_INCLUDE
#include <findkey.h>  // colin special
#include <keytype.h>  // colin special
int importCipher(char * pKey, char * pKek, char * pRawType,
                     char ** pData, int * lData)
{
  //  CSNDSYI2
  int rc;
  int rs;
  int zero = 0;
  int i64 = 64;
  int unknown = 0;
  int lKekData;
  char * pKekData;
  char out[60];
  int lOut = sizeof(out);
  rc = findKey(" ",pKek,&pKekData,&lKekData);
  if ( rc != 0)
  {
     printf("impcip:findKey return code %s %i\n",pKey,rc);
     return rc;
  }
  rc = keyType(pKekData,lKekData ,&out[0],&lOut);
  printf("KEK:%s:%s\n",pKek    ,out);
  // make these char 64
  do64(KEK,pKek )   ;
  do64(myKey ,pKey    );
  char * pRule;
  char8 rule_RSA[3] =
                       {"AES     ",
                        "PKOAEP2 ",
                        "SHA-256 "};
//char8 rule_Data_PKI[3] =
//                       {"AES     ",
//                        "PKCSOAEP",
//                        "SHA-256 "};
   char8 rule_Import[2] =
                        {"AES     ",
                         "AESKW   "};
  int rule_count                 =  2;
  if ( isIMPORTER( out))
  {
     pRule = &rule_Import[0][0];
     printf("KEK %s Is importer. Rule:%24.24s\n",pKek,pRule);
  }
  else  // isRSA( out )
  {
     pRule = &rule_RSA[0][0];
     printf("KEK %s is RSA. Rule:%24.24s\n",pKek,pRule);
  }
  int lOutput = 725 ;
  char * pOutput = (char * ) malloc(lOutput);
  if ( pOutput == 0)
  {
    printf("malloc for %i failed in IMPAES\n",lOutput);
  }
//printf("rule %16.16s\n",pRule );
  CSNDSYI2 (
              &rc,                /* return code            */
              &rs ,               /* reason code            */
              &zero,              /* exit data length       */
              0    ,              /* exit data[]            */
              &rule_count,        /* rule array count       */
              pRule,              /* rule array[]           */
              lData     ,         /* length of input data   */
            * pData,              /* input data             */

              &i64,               /* priv key length,  */
    (char *)  &KEK     ,          /*priv token[64]      */

              &i64,               /* name to be stored           */
    (char *) &myKey,             /* key name[]             */

              &lOutput    ,       /* Imported key length    */
              pOutput        );   /* Imported key           */
// if( rc > 0)
   printf("ImpCIP:CSNDSYI2 rc %i rs %i %s\n",rc,rs,csfgetrc(rs));
 if (rc != 0) return rc;
 // get rid of old input buffer
   free (*pData);
   *pData =  pOutput;
   *lData = lOutput;
 return 0;
 }
 #endif
