// generate exporter|importer|cipher DH key
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string.h>
#include </usr/include/csfbext.h>
typedef char    char8[8];
#include <csfgetrc.h>  // colin special
#include <printhx.h>  // colin special
#include <do64.h>  // colin special
#include <args2.h>  // colin special
#include <addckds.h>  // colin special
#include <SKELAES.h> // colin special
#include <exists.h>  // colin special
#include <GENDH  .h>  // colin special
#include <findkey.h>  // colin special
#include <keytype.h>  // colin special
int main( int argc, char *argv??(??))
{
  char * pKey   = "";
  char * pReplace = "";
  char * pPrivate= "";
  char * pPublic = "";
  char * pParty  = "";
  char * pType = "";
  int rc = 0;
  rc += readArgs( argc,argv,"-key",0 ,&pKey,"v");
  rc += readArgs( argc,argv,"-replace",0 ,&pReplace,"v");
  rc += readArgs( argc,argv,"-public",0 ,&pPublic,"v");
  rc += readArgs( argc,argv,"-private",0 ,&pPrivate,"v");
  rc += readArgs( argc,argv,"-party",0 ,&pParty,"v");
  rc += readArgs( argc,argv,"-type",0 ,&pType,"v");
  if (rc > 0 )
  {
     printf("Problem with parameters %i\n",rc);
     return 8;
  }
  if ( pKey[0] == 0  ) {rc++;printf("-key ...  is required\n");}
  if ( pParty[0] == 0  ) {rc++;printf("-party ...  is required\n");}
  if ( pPublic[0] == 0  ) {rc++;printf("-public ...  is required\n");}
  if ( pPrivate[0] == 0  ) {rc++;printf("-private ...  is required\n");}
  if ( pType[0] == 0  ) {rc++;printf("-type E|I|C  is required\n");}
  if ( rc > 0) return rc;

  if (rc != 0) return rc;
  if ( strlen(pReplace) > 0  &&
       ( pReplace[0]=='y'  ||  pReplace[0]=='Y')
     ) pReplace = "Y";
  else pReplace = "N";
  // checks keys are valid
  // eg ECC
  //  Check private
  char * pData;
  int lData;
  char * pKekData;
  int lKekData;
  char pubOut[60];
  int lPubOut = sizeof(pubOut);
  char privOut[60];
  int lPrivOut = sizeof(privOut);
  // look in the PKDS
  rc = findKey("P",pPrivate,&pKekData,&lKekData);
  if (rc != 0)
  {
    printf("GAESXDH:private key not found %s\n",pPrivate);
    return rc;
    }
  rc = keyType(pKekData,lKekData ,&privOut[0],&lPrivOut);
  printf("Private:%s:%s\n",pPrivate,privOut);
  if (!isECCPRIV(privOut))
  {
    printf("GAESXDH:Private key is not ECC Private\n");
    return 8;
  }
  // public
  // look in the PKDS
  rc = findKey("P",pPublic ,&pKekData,&lKekData);
  if (rc != 0)
  {
    printf("public key not found %s\n",pPublic);
    return rc;
    }
  rc = keyType(pKekData,lKekData ,&pubOut[0],&lPubOut);
  printf("Public :%s:%s\n",pPublic ,pubOut);
  if (!(isECCPRIV(pubOut)|| isECCPUB(pubOut)))
  {
    printf("GAESXDH:Public key is not ECC Public or Private\n");
    return 8;
  }
  //
  char * pPubType = pECCType(pubOut);
  char * pPrivType = pECCType(privOut);
  // both PKI keys have to be the same type and key size
  if ( memcmp(pPubType,pPrivType,8) != 0)
  {
     printf("The type and size of the ECC keys do not match."
            " Private %8.8s Public %8.8s\n",pPrivType,pPubType);
     return 8;
  }
  //
  //       Now the ICSF processing
  //
  // build skeleton
  rc =  skeletonAES(pType,&pData, &lData);
  if (rc != 0) return rc;

  rc= GENDH(pPrivate, pPublic,& pData,& lData,pParty);
  if (rc != 0) return rc;
  // create record in ckds
  rc = addCKDS(pKey,pData,lData,pReplace);
  if (rc != 0) return rc;
  else
  printf("Added %s successfully\n",pKey);
   return rc;
}
